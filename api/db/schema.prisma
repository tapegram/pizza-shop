datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = "native"
}

// Auth
// https://redwoodjs.com/docs/auth/dbauth

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
}

// Pizza Shop Config

model PizzaTopping {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  isAvailable Boolean
  Order       Order[]
}

model PizzaSize {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  isAvailable Boolean
  Order       Order[]
}

model PizzaType {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  isAvailable Boolean
  Order       Order[]
}

// Ordering

model Order {
  id Int @id @default(autoincrement())

  customerInfo   CustomerInfo @relation(fields: [customerInfoId], references: [id])
  customerInfoId Int          @unique

  delivery   Delivery? @relation(fields: [deliveryId], references: [id])
  deliveryId Int?

  pizzaType   PizzaType @relation(fields: [pizzaTypeId], references: [id])
  pizzaTypeId Int

  pizzaSize   PizzaSize @relation(fields: [pizzaSizeId], references: [id])
  pizzaSizeId Int

  pizzaToppings PizzaTopping[]

  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CustomerInfo {
  id Int @id @default(autoincrement())

  name  String
  phone String
  email String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order?
}

model Delivery {
  id        Int     @id @default(autoincrement())
  address   Address @relation(fields: [addressId], references: [id])
  Order     Order[]
  addressId Int
}

// Modeling address can be hard. Limiting this to standard us address forms for now
model Address {
  id             Int        @id @default(autoincrement())
  streetAddress1 String
  streetAddress2 String?
  city           String
  state          String
  zipCode        String
  Delivery       Delivery[]
}
